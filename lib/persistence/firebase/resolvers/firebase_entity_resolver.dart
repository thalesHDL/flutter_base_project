import 'package:flutter_base_project/persistence/core/annotations/column.dart';
import 'package:flutter_base_project/persistence/core/annotations/entity.dart';
import 'package:flutter_base_project/persistence/core/annotations/id.dart';
import 'package:reflectable/reflectable.dart';

class FirebaseEntityResolver {
  FirebaseEntityResolver();

  void _checkEntityAnnotation(ClassMirror entityClass) {
    if (!entityClass.metadata.any((el) => el is Entity)) {
      // TODO: raise error, entity dont have annotation Entity
    }
  }

  String idField(ClassMirror entityClass) {
    return entityClass.declarations.values
        .singleWhere((field) =>
            field is VariableMirror &&
            field.metadata.any((annotation) => annotation is Id))
        .simpleName;
  }

  bool idIsAutoGenerated(ClassMirror entityClass) {
    VariableMirror idField = entityClass.declarations.values.firstWhere(
        (field) =>
            field is VariableMirror &&
            field.metadata.any((annotation) => annotation is Id));
    Id id = idField.metadata.firstWhere((annotation) => annotation is Id);
    return id.autoGenerated;
  }

  String name(ClassMirror entityClass) {
    return entityClass.simpleName;
  }

  List<String> columns(ClassMirror entityClass) {
    return entityClass.declarations.values
        .where((field) =>
            field is VariableMirror &&
            field.metadata
                .any((entityAnnotation) => entityAnnotation is Column))
        .map((column) => (column.metadata.firstWhere(
                (columnAnnotation) => columnAnnotation is Column) as Column)
            .name)
        .toList();
  }

  factory FirebaseEntityResolver.newInstance() {
    return FirebaseEntityResolver();
  }
}
